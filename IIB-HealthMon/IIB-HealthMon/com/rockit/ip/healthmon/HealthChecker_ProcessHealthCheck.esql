BROKER SCHEMA com.rockit.ip.healthmon


-- $MQSI Author=Eduard Gohr, R.Sokunov rockIT.consulting GmbH MQSI$

CREATE COMPUTE MODULE HealthChecker_ProcessHealthCheck
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyInitConfigToEnvironment();
--		DECLARE infoMsgText CHARACTER;
--		CALL logInfo('HC0010P', ' HealthCheck-Result: '|| infoMsgText, Environment);
		
		DECLARE refConnectorsIn REFERENCE TO InputRoot.XMLNSC.Connectors;
		
		DECLARE refConnElementIn REFERENCE TO InputRoot.XMLNSC.Connectors.*[1];		
												
		WHILE LASTMOVE(refConnElementIn ) DO
			CALL ProcessConnectors(FIELDNAME(refConnElementIn), refConnectorsIn);			
			MOVE refConnElementIn NEXTSIBLING;
		END WHILE;
		
		CALL CopyMessageHeaders();
		CREATE LASTCHILD OF OutputRoot DOMAIN('XMLNSC');
		DECLARE refEnvConfig REFERENCE TO Environment.Variables.Config.XMLNSC;
		
		CREATE FIELD OutputRoot.XMLNSC.HealthCheckResponse;
		DECLARE refOutResponse REFERENCE TO OutputRoot.XMLNSC.HealthCheckResponse;
		
		SET refOutResponse.ResponseTimestamp = refEnvConfig.ResponseTimestamp;
		SET refOutResponse.Connectors = refEnvConfig.Connectors;
		PROPAGATE TO TERMINAL 'out1';
					
		RETURN FALSE;
	END;
	
--	Preparing the structure in the Environment for the Output/ deleting the unnecessary fields.
	
	CREATE PROCEDURE CopyInitConfigToEnvironment()
	BEGIN
		CREATE FIELD Environment.Variables.Config;
		CREATE LASTCHILD OF Environment.Variables.Config DOMAIN('XMLNSC');
		SET Environment.Variables.Config.XMLNSC.ResponseTimestamp = CAST(CURRENT_TIMESTAMP AS CHAR FORMAT 'I');
		SET Environment.Variables.Config.XMLNSC.Connectors = InputRoot.XMLNSC.Connectors;
						
		DECLARE refConnElementIn REFERENCE TO Environment.Variables.Config.XMLNSC.Connectors.*[1];
		WHILE LASTMOVE(refConnElementIn) DO
			DECLARE refConnectorIn REFERENCE TO refConnElementIn.*[1];
			WHILE LASTMOVE(refConnectorIn) DO
				DECLARE refConnectorFieldIn REFERENCE TO refConnectorIn.*[<];
				WHILE LASTMOVE(refConnectorFieldIn) DO
					IF (FIELDNAME(refConnectorFieldIn) <> 'Id') THEN
						SET refConnectorFieldIn = NULL;
						MOVE refConnectorFieldIn TO refConnectorIn.*[<];
					ELSE
						MOVE refConnectorFieldIn PREVIOUSSIBLING;
					END IF;
					
				END WHILE;
				
				MOVE refConnectorIn NEXTSIBLING REPEAT NAME;
			END WHILE;
			
			MOVE refConnElementIn NEXTSIBLING;
		END WHILE;	
	END;	
	
	CREATE PROCEDURE ProcessConnectors(IN ConnectorsName CHAR, IN refConnectorsIn REFERENCE)
	BEGIN
		IF EXISTS(refConnectorsIn.{ConnectorsName}[]) THEN
			CALL CopyMessageHeaders();
			SET OutputRoot.XMLNSC.Connectors.{ConnectorsName} = refConnectorsIn.{ConnectorsName};
			PROPAGATE TO LABEL ConnectorsName;
		END IF;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
