BROKER SCHEMA com.rockit.ip.healthmon
PATH com.rockit.ip.healthmon, com.rockit.ip.logging;
-- $MQSI Author=Eduard Gohr, rockIT.consulting GmbH MQSI$

CREATE COMPUTE MODULE MQChecker_CreateMQRequest
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CREATE LASTCHILD OF  Environment.Variables.Config.XMLNSC.Connectors.Connector[<] NAME 'mq';
		DECLARE refConnector REFERENCE TO InputRoot.XMLNSC.Connectors;
		DECLARE refEnv REFERENCE TO Environment.Variables.Config.XMLNSC.Connectors.Connector[<].mq;
		DECLARE Id CHARACTER;

		WHILE LASTMOVE(refConnector) DO
			DECLARE statusDetailed CHARACTER '';
			DECLARE status CHARACTER 'OK';
			BEGIN
				DECLARE CONTINUE HANDLER FOR SQLSTATE LIKE'%'
				BEGIN
					SET Environment.ReportFlag = 'false';
					SET status = 'NOK';
					SET statusDetailed = COALESCE(COALESCE(NULLIF(TRIM(SQLERRORTEXT),''),Environment.Variables.error.message),'No error message text');
					SET Environment.Variables.error = NULL;
				END;


				DECLARE refProperties REFERENCE TO refConnector.mq.property[1];

				WHILE LASTMOVE(refProperties) DO
					IF ( FIELDVALUE(refProperties.(XMLNSC.Attribute)name) = 'Id' ) THEN
						SET Id = FIELDVALUE(refProperties.(XMLNSC.Attribute)value);
					END IF;

					IF ( FIELDVALUE(refProperties.(XMLNSC.Attribute)name) = 'QueueName' ) THEN
						SET OutputLocalEnvironment.MQ.GET.QueueName = FIELDVALUE(refProperties.(XMLNSC.Attribute)value);
					END IF;

					MOVE refProperties NEXTSIBLING REPEAT NAME;
				END WHILE;

				SET OutputRoot.Properties = InputProperties;

				PROPAGATE;
				CALL setConnectorStatus('mq',Id, status, statusDetailed, refEnv);
				MOVE refConnector NEXTSIBLING REPEAT TYPE NAME;
			END;
		END WHILE;

		RETURN FALSE;

	END;

END MODULE;