BROKER SCHEMA com.rockit.ip.healthmon
-- $MQSI Author=Eduard Gohr, rockIT.consulting GmbH MQSI$

CREATE COMPUTE MODULE HealthMon_ProcessHealthMon
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		SET Environment.ReportFlag = 'true';
		
		CREATE LASTCHILD OF  Environment NAME 'Variables';
		CREATE LASTCHILD OF  Environment.Variables NAME 'Config';
		CREATE LASTCHILD OF Environment.Variables.Config DOMAIN('XMLNSC');
		CREATE LASTCHILD OF Environment.Variables.Config.XMLNSC NAME 'connectors';
		
		SET Environment.Variables.Config.XMLNSC.ResponseTimestamp = CAST(CURRENT_TIMESTAMP AS CHAR FORMAT 'I');
		
		DECLARE refConnectorsIn REFERENCE TO InputRoot.XMLNSC.healthmon.connectors.*[1];
		
		WHILE LASTMOVE(refConnectorsIn) DO
			
			CREATE LASTCHILD OF  Environment.Variables.Config.XMLNSC.connectors NAME 'connector';
			CALL ProcessConnectors(FIELDNAME(refConnectorsIn.*[1]), refConnectorsIn);
			
			MOVE refConnElementIn NEXTSIBLING;
		END WHILE;
		
		CALL CopyMessageHeaders();
		
		SET OutputRoot.XMLNSC = InputRoot.XMLNSC;
		
		PROPAGATE TO TERMINAL 'out1';
					
		RETURN FALSE;
	END;
		
	
	CREATE PROCEDURE ProcessConnectors(IN ConnectorsName CHAR, IN refConnectorsIn REFERENCE)
	BEGIN
		IF EXISTS(refConnectorsIn.{ConnectorsName}[]) THEN
			CALL CopyMessageHeaders();
			SET OutputRoot.XMLNSC.Connectors.{ConnectorsName} = refConnectorsIn.{ConnectorsName};
			PROPAGATE TO LABEL ConnectorsName;
		END IF;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
